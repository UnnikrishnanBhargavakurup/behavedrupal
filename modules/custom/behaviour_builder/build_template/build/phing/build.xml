<!--
  name: build.xml
  description: The main project build file for setting up the enviorment for behaviour testing.
-->

<!--
 commandline:
 
build/bin/phing -f build/phing/build.xml -DskipDownload -Dbrowser=phantomjs

 https://github.com/qinty/phpunit-selenium-env/blob/master/build.xml

 http://stackoverflow.com/questions/6517501/selenium-2-how-to-check-that-server-is-running-and-stop-the-server

 http://stackoverflow.com/questions/5142139/how-to-check-if-selenium-server-is-running-in-background
-->
<project name="behavedrupal" default="build" phingVersion="2.8.2">

    <!-- Additional task classes -->
    <includepath classpath="${project.basedir}/phingcludes"/>

    <taskdef name="behat" classname="phingcludes.BehatTask"/>

    <taskdef name="backgroundexec" classname="phingcludes.BackgroundExecTask"/>

    <taskdef name="downloadfeatures" classname="phingcludes.DownloadFeaturesTask"/>

    <taskdef name="filereplace" classname="phingcludes.FileReplaceTask"/>

    <!-- end of tasks -->
    
    <property file="${project.basedir}/build.properties" override="true"/>


    <!-- Application -->
    <property name="repo.root.relative" value="${project.basedir}/../.."/>
    <resolvepath propertyName="repo.root" file="${repo.root.relative}"/>

    <!-- Composer & Behat -->
    <property name="composer.bin" value="${repo.root}/build/bin"/>

    <property name="features"
              value="${repo.root}/build/tests/behat/features" />

    <property name="behat_root"
              value="${repo.root}/build/tests/behat" />

    <property name="behat.config"
              value="${repo.root}/build/tests/behat/behat.yml"/>
    <property name="behat.local"
              value="${repo.root}/build/tests/behat/behat.local.yml"/>

    <property name="phantomjs.bin"
              value="${composer.bin}/phantomjs" />

    <property name="selenium.bin"
              value="${composer.bin}/selenium-server-standalone-3.0.0-beta3.jar" />

    <property name="chrome.driver"
              value="${composer.bin}/webdriver/chromedriver" />

    <property name="firefox.driver"
              value="${composer.bin}/webdriver/geckodriver" />

    <property name="opera.driver"
              value="${composer.bin}/webdriver/geckodriver" />

    <property name="junit"
              value="${behat_root}/junit" />

    <!-- Targets       -->
    <target name="test_phing" description="Test phing">
      <downloadfeatures url="${behave_server}/behave/features/${session_id}?_format=json" 
            dir="${behat_root}/feature.zip"/>
    </target>
    <target name="build"
            description="Run all the behaviour test features defined."
            depends="test:behat">
      <!-- for phantomjs we dont need selenium -->
      <if>
        <equals arg1="${server}" arg2="phantomjs" />
        <then>
          <echo message="Stoping phantomjs server..." />
          <!-- <backgroundexec pid="phantomjs_pid" command="stop" />-->
          <exec command="killall phantomjs" error="/dev/null" output="/dev/null"/>
        </then>
        <else>
          <echo message="Stoping selenium server..." />
          <backgroundexec pid="selenium_pid" command="stop" />
          <exec command="pgrep chromedriver | xargs kill" error="/dev/null" output="/dev/null"/>
        </else>
      </if>
    </target>

    <target name="check:config" description="Check system configuration for Java and PHP." >

      <property name="canInstall" value="true" />

      <!-- Scan Java version-->
      <exec level="debug" command="java -version" outputProperty="javaVersionParagraph" />

      <php level="debug" expression="substr('${javaVersionParagraph}', 14, 5)" returnProperty="javaVersion" />

      <php level="debug" expression="version_compare('${javaVersion}', '1.6.0') >= 0" returnProperty="javaVersionCheck" />

      <php level="debug" expression="version_compare('${javaVersion}', '0.1') >= 0" returnProperty="javaInstalled" />

      <!-- Scan PHP version -->
      <php level="debug" expression="version_compare(PHP_VERSION, '5.3') >= 0" returnProperty="phpversioncheck" />

      <php level="debug" expression="function_exists('curl_version')" returnProperty="curlcheck" />

      <if>
        <equals arg1="${javaVersionCheck}" arg2="true" />
        <then>
          <echo>[x] Java version ${javaVersion}</echo>
        </then>
        <else>
          <property name="canInstall" value="false" />
          <if>
            <equals arg1="${javaInstalled}" arg2="false" />
            <then>
              <warn level="error" message="[ ] Java is not installed or accessible." />
            </then>
            <else>
              <warn level="error" message="[ ] Java version ${javaVersion} should be at least 1.6" />
            </else>
          </if>
        </else>
      </if>

      <if>
        <equals arg1="${phpversioncheck}" arg2="true" />
        <then>
          <echo>[x] PHP version ${php.version}</echo>
        </then>
        <else>
          <property name="canInstall" value="false" />
          <warn level="error" message="[ ] PHP version ${php.version} should be at least 5.3" />
        </else>
      </if>

      <if>
        <equals arg1="${curlcheck}" arg2="true" />
        <then>
          <echo>[x] PHP curl checking</echo>
        </then>
        <else>
          <property name="canInstall" value="false" />
          <warn level="error" message="[ ] PHP curl should be installed" />
        </else>
      </if>

      <!--  We need java and php for this -->
      <if>
        <equals arg1="${canInstall}" arg2="false" />
        <then>
          <fail message="System requrement not met, please check whether java exist in your system and is accessible in commandline." />
        </then>
      </if>

      <!-- set default browser if not specified in comman line. -->
      <if>
        <not>
          <isset property="browser" />
        </not>
        <then>
          <echo message="Browser not specified in commanline, taking chrome as default." />
          <property name="browser" value="chrome" />
        </then>
      </if>
    </target>

    <target name="init" depends="check:config">

      <condition property="project.setup_selenium" value="true">
        <available file="selenium-server-standalone-3.0.0-beta3.jar" type="file" filepath="${composer.bin}" />
      </condition>
      
      <if>
        <available file='${composer.bin}/webdriver' type='dir' />
        <then>
          <condition property="project.setup_webdriver_firefox" value="true">
            <available file="geckodriver" type="file" filepath="${composer.bin}/webdriver" />
          </condition>

          <condition property="project.setup_webdriver_chrome" value="true">
            <available file="chromedriver" type="file" filepath="${composer.bin}/webdriver" />
          </condition>

          <condition property="project.setup_webdriver_opera" value="true">
            <available file="operadriver" type="file" filepath="${composer.bin}/webdriver" />
          </condition>
        </then>
        <else>
          <mkdir dir="${composer.bin}/webdriver" />
        </else>
      </if>
      <!-- we need to rewrite browser in configuration -->
      <chmod file="${behat.local}" mode="0755" />

      <if>
        <equals arg1="${browser}" arg2="firefox" />
        <then>
          <filereplace browser="firefox" file="${behat.local}" />
          <php expression="'-Dwebdriver.gecko.driver=${firefox.driver}'" returnProperty="selenium.browser"/>
        </then>
      <elseif>
        <equals arg1="${browser}" arg2="chrome" />
        <then>
          <filereplace browser="chrome" file="${behat.local}" />
          <php expression="'-Dwebdriver.chrome.driver=${chrome.driver}'" returnProperty="selenium.browser"/>
        </then>
      </elseif>
      <elseif>
        <equals arg1="${browser}" arg2="opera" />
        <then>
          <filereplace browser="opera" file="${behat.local}" />
          <php expression="'-Dwebdriver.opera.driver=${opera.driver}'" returnProperty="selenium.browser"/>
        </then>
      </elseif>
      <elseif>
        <equals arg1="${browser}" arg2="phantomjs" />
        <then>
          <filereplace browser="phantomjs" file="${behat.local}" />
        </then>
      </elseif>
      </if>
    </target>

    <!-- set up selenium server for the fist time -->
    <target name="setup-selenium-server" depends="init" unless="project.setup_selenium">

      <httpget url="${selenium_server.url}"
             dir="${composer.bin}"
             />
    </target>

    <!-- Set up webdrivers for the test -->
    <target name="setup-webdriver" depends="setup-selenium-server">
      <if>       
        <equals arg1="${browser}" arg2="firefox" />
        <then>
          <phingcall target="setup-webdriver-firefox" />
        </then>
      <elseif>
        <equals arg1="${browser}" arg2="chrome" />
        <then>
          <phingcall target="setup-webdriver-chrome" />
        </then>
      </elseif>
      <elseif>
        <equals arg1="${browser}" arg2="opera" />
        <then>
          <phingcall target="setup-webdriver-opera" />
        </then>
      </elseif> 
      </if>
    </target>
    <!-- End of webdrivers setup -->

    <!-- Set up firefox driver -->
    <target name="setup-webdriver-firefox" unless="project.setup_webdriver_firefox">
      <if>
        <os family="mac" />
        <then>
          <httpget followRedirects="true" sslVerifyPeer="false" url="${firefox.mac_url}"
             dir="${composer.bin}/webdriver"
             />
          <untar file="${composer.bin}/webdriver/geckodriver-v0.10.0-macos.tar.gz" todir="${composer.bin}/webdriver" />
          <delete file="${composer.bin}/webdriver/geckodriver-v0.10.0-macos.tar.gz" />
          <chmod file="${composer.bin}/webdriver/geckodriver" mode="0755" />
        </then>
      <elseif>
        <os family="unix" />
        <then>
          <httpget followRedirects="true" sslVerifyPeer="false" url="${firefox.unix_url}"
             dir="${composer.bin}/webdriver"
             />
          <untar file="${composer.bin}/webdriver/geckodriver-v0.10.0-macos.tar.gz" todir="${composer.bin}/webdriver" />
          <delete file="${composer.bin}/webdriver/geckodriver-v0.10.0-linux64.tar.gz" />
          <chmod file="${composer.bin}/webdriver/geckodriver" mode="0755" />
        </then>
      </elseif>
      <elseif>
        <os family="windows" />
        <then>
          <httpget followRedirects="true" sslVerifyPeer="false" url="${firefox.win_url}"
             dir="${composer.bin}/webdriver"
             />
          <untar file="${composer.bin}/webdriver/geckodriver-v0.10.0-macos.tar.gz" todir="${composer.bin}/webdriver" />
          <delete file="${composer.bin}/webdriver/geckodriver-v0.10.0-win64.tar.gz" />
          <chmod file="${composer.bin}/webdriver/geckodriver" mode="0755" />
        </then>
      </elseif>
      </if>
      <property name="project.setup_webdriver_firefox"
              value="true" />
    </target>
    <!-- End of firefox driver setup -->

    <!-- Set up chrome driver -->
    <target name="setup-webdriver-chrome"
          unless="project.setup_webdriver_chrome">
      <if>
        <os family="mac" />
        <then>
          <httpget followRedirects="true" sslVerifyPeer="false" url="${chrome.mac_url}"
             dir="${composer.bin}/webdriver"
             />
          <unzip file="${composer.bin}/webdriver/chromedriver_mac64.zip" todir="${composer.bin}/webdriver" />
          <delete file="${composer.bin}/webdriver/chromedriver_mac64.zip" />
          <chmod file="${composer.bin}/webdriver/chromedriver" mode="0755" />
        </then>
      <elseif>
        <os family="unix" />
        <then>
          <httpget followRedirects="true" sslVerifyPeer="false" url="${chrome.unix_url}"
             dir="${composer.bin}/webdriver"
             />
          <unzip file="${composer.bin}/webdriver/chromedriver_linux64.zip" todir="${composer.bin}/webdriver" />
          <delete file="${composer.bin}/webdriver/chromedriver_linux64.zip" />
          <chmod file="${composer.bin}/webdriver/chromedriver" mode="0755" />
        </then>
      </elseif>
      <elseif>
        <os family="windows" />
        <then>
          <httpget followRedirects="true" sslVerifyPeer="false" url="${chrome.win_url}"
             dir="${composer.bin}/webdriver"
             />
          <unzip file="${composer.bin}/webdriver/geckodriver-v0.10.0-win64.zip" todir="${composer.bin}/webdriver" />
          <delete file="${composer.bin}/webdriver/geckodriver-v0.10.0-win64.zip" />
          <chmod file="${composer.bin}/webdriver/chromedriver" mode="0755" />
        </then>
      </elseif>
      </if>
      <property name="project.setup_webdriver_chrome"
              value="true" />
    </target>
    <!-- End of chrome driver setup -->

    <!-- Set up opera driver -->
    <target name="setup-webdriver-opera"
          unless="project.setup_webdriver_opera">
      <if>
        <os family="mac" />
        <then>
          <httpget followRedirects="true" sslVerifyPeer="false" url="${opera.mac_url}"
             dir="${composer.bin}/webdriver"
             />
          <untar file="${composer.bin}/webdriver/operadriver_mac64.zip" todir="${composer.bin}/webdriver" />
          <delete file="${composer.bin}/webdriver/operadriver_mac64.zip" />
          <chmod file="${composer.bin}/webdriver/geckodriver" mode="0755" />
        </then>
      <elseif>
        <os family="unix" />
        <then>
          <httpget followRedirects="true" sslVerifyPeer="false" url="${opera.unix_url}"
             dir="${composer.bin}/webdriver"
             />
          <untar file="${composer.bin}/webdriver/operadriver_linux64.zip" todir="${composer.bin}/webdriver" />
          <delete file="${composer.bin}/webdriver/operadriver_linux64.zip" />
          <chmod file="${composer.bin}/webdriver/geckodriver" mode="0755" />
        </then>
      </elseif>
      <elseif>
        <os family="windows" />
        <then>
          <httpget followRedirects="true" sslVerifyPeer="false" url="${opera.win_url}"
             dir="${composer.bin}/webdriver"
             />
          <untar file="${composer.bin}/webdriver/operadriver_win32.zip" todir="${composer.bin}/webdriver" />
          <delete file="${composer.bin}/webdriver/operadriver_win32.zip" />
          <chmod file="${composer.bin}/webdriver/geckodriver" mode="0755" />
        </then>
      </elseif>
      </if>
      <property name="project.setup_webdriver_opera"
              value="true" />
    </target>
    <!-- End of opera driver setup -->

    <!-- Launch  phantomjs enviorment -->
    <target name="phantomjs:launch"
          description="Launches a GhostDriver...">
      <echo message="Launching phantomjs server..." />
      <exec command="killall phantomjs" error="/dev/null" output="/dev/null"/>
      <exec command="${phantomjs.bin} --webdriver=${server.port}"
          passthru="true"
          spawn="true"
          checkreturn="true" />
      <!-- need some time to bind the port -->
      <exec command="sleep 2" />
    </target>
    <!-- End of phantomjs enviorment -->

    <target name="selenium_server:launch"
          description="Launching selenium server." depends="setup-webdriver">
      <echo message="Launching selenium server..." />
      <backgroundexec pid="selenium_pid" 
        command="start" 
        executable="java ${selenium.browser} -jar ${selenium.bin} -port ${server.port}" 
      />
    </target>
    
    <!-- Set up the enviorment before running the test -->
    <target name="setup:environment" 
      description="Setup selenium or phantomjs headless browser" depends="init">
      <if>
        <equals arg1="${browser}" arg2="phantomjs" />
        <then>
          <property name="server" value="phantomjs" />
          <phingcall target="phantomjs:launch" />
        </then>
      <else>
        <property name="server" value="selenium" />
        <phingcall target="selenium_server:launch" />
      </else>
      </if>      
    </target>
    <!-- Enf of enviorment setup -->

    <!-- Set up the enviorment before running the test -->
    <target name="download:features" 
      description="Download features from current workspace data." depends="setup:environment">
      <if>
        <not>
          <isset property="skipDownload" />
        </not>
        <then>
          <if>
            <available file='${features}' type='dir' />
            <then>
              <delete dir="${features}" includeemptydirs="true" verbose="false" failonerror="true" />
            </then>
          </if>
          <!--
          <httpget filename="features.zip" 
            url="${behave_server}/behave/features/${session_id}?_format=json" 
            dir="${behat_root}" 
          />
          -->
          <downloadfeatures url="${behave_server}/behave/features?_format=json" 
            sid="${session_id}" dir="${behat_root}/features.zip"/>
          <echo message="${line.separator}"/>
          <if>
            <available file='${behat_root}/features.zip' type='file' />
            <then>
              <unzip file="${behat_root}/features.zip" todir="${behat_root}" />
              <delete file="${behat_root}/features.zip" />
            </then>
            <else>
              <fail 
                message="Unable to download features, your session might have expired \
                please downlaod the build and run the command again."
              />
            </else>
          </if>
        </then>
        <else>
          <echo message="Skipping downloading features from behavedrupal IDE." />
        </else>
      </if>
    </target>
    <!-- Enf of enviorment setup -->


    <!-- Running the test here -->
    <target name="test:behat" description="Behat testing for behavedrupal" depends="download:features">
        <!-- If behat.local.yml doesn't exist, behat will be a sad panda so create a stub to appease it. -->
        <if>
            <not>
                <available file="${behat.local}" property="behat_local_exists" value="exists"/>
            </not>
            <then>
                <echo message="# Local behat settings." file="${behat.local}"
                      append="false"/>
            </then>
        </if>
        <!-- Run behat. Any settings in behat.yml or behat.local.yml will be used. -->
        <!-- haltonerror="true" -->
        <behat executable="${composer.bin}/behat"
               config="${behat.config}"
               verbose="true"
               strict="true"
               returnProperty="behatPass"
               format="format=pretty --out=std --format=junit --out=${junit}"/>

    </target>
    <!-- Enf behat testing -->

</project>
